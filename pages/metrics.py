import os
import streamlit as st
from PIL import Image
import requests
from io import BytesIO
import torch
import pandas as pd
import matplotlib.pyplot as plt
import mplcyberpunk
import numpy as np
from ultralytics import YOLO


plt.style.use("cyberpunk")

page = st.sidebar.selectbox("Navigate", ["ü¶≥ FACES", "‚öì BOATS", "üå≥ FOREST"])

if page == "‚öì BOATS":
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO12
    @st.cache_resource
    def load_model():
        model_path = "models/boats.pt"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(model_path):
            st.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
            st.stop()

        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model_b = YOLO("models/boats.pt")
        model_b.to(device)
        return model_b

    model_b = load_model()

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ results.csv
    @st.cache_data
    def load_results():
        results_path = "models/boats.csv"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(results_path):
            st.error(f"–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {results_path}")
            st.stop()

        results = pd.read_csv(results_path)
        return results

    results = load_results()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç—Ä–∏–∫
    def plot_metrics(results):
        fig, ax = plt.subplots(4, 1, figsize=(10, 20))

        # –ì—Ä–∞—Ñ–∏–∫ Loss
        ax[0].plot(
            results["epoch"],
            results["train/box_loss"],
            label="Train Box Loss",
            color="red",
        )
        ax[0].plot(
            results["epoch"],
            results["val/box_loss"],
            label="Validation Box Loss",
            color="orange",
        )
        ax[0].set_title("Box Loss over Epochs")
        ax[0].set_xlabel("Epoch")
        ax[0].set_ylabel("Loss")
        ax[0].legend()

        # –ì—Ä–∞—Ñ–∏–∫ Precision –∏ Recall
        ax[1].plot(
            results["epoch"],
            results["metrics/precision(B)"],
            label="Precision",
            color="blue",
        )
        ax[1].plot(
            results["epoch"],
            results["metrics/recall(B)"],
            label="Recall",
            color="green",
        )
        ax[1].set_title("Precision and Recall over Epochs")
        ax[1].set_xlabel("Epoch")
        ax[1].set_ylabel("Value")
        ax[1].legend()

        # –ì—Ä–∞—Ñ–∏–∫ mAP
        ax[2].plot(
            results["epoch"], results["metrics/mAP50(B)"], label="mAP50", color="purple"
        )
        ax[2].plot(
            results["epoch"],
            results["metrics/mAP50-95(B)"],
            label="mAP50-95",
            color="brown",
        )
        ax[2].set_title("mAP over Epochs")
        ax[2].set_xlabel("Epoch")
        ax[2].set_ylabel("mAP")
        ax[2].legend()

        # –ì—Ä–∞—Ñ–∏–∫ Learning Rates
        ax[3].plot(
            results["epoch"],
            results["lr/pg0"],
            label="Learning Rate (pg0)",
            color="teal",
        )
        ax[3].plot(
            results["epoch"],
            results["lr/pg1"],
            label="Learning Rate (pg1)",
            color="pink",
        )
        ax[3].plot(
            results["epoch"],
            results["lr/pg2"],
            label="Learning Rate (pg2)",
            color="gray",
        )
        ax[3].set_title("Learning Rates over Epochs")
        ax[3].set_xlabel("Epoch")
        ax[3].set_ylabel("Learning Rate")
        ax[3].legend()

        plt.tight_layout()
        mplcyberpunk.add_glow_effects(ax[0], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[1], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[2], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[3], gradient_fill=True)
        return fig

    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def calculate_image_metrics(image, model_b):
        with torch.no_grad():
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
            results = model_b(image)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º bounding boxes –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
            boxes = results[0].boxes
            num_objects = len(boxes)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º mAP50 –∏ mAP50-95 –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if hasattr(results[0], "mAP50"):
                mAP50 = results[0].mAP50  # mAP –¥–ª—è IoU –ø–æ—Ä–æ–≥–∞ 0.5
                mAP50_95 = results[0].mAP50_95  # mAP –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ IoU [0.5:0.95]
            else:
                mAP50, mAP50_95 = 0.0, 0.0

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ bounding boxes –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plotted_image = results[
                0
            ].plot()  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è bounding boxes

            return num_objects, mAP50, mAP50_95, plotted_image

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
    st.title("Metrics Dashboard")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    st.header("Training Metrics")
    fig = plot_metrics(results)
    st.pyplot(fig)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ URL
    st.header("–ò—â–µ–º —Å–ø–∞—Å–µ–Ω–∏–µ –≤ –º–æ—Ä–µ")
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"]
    )
    image_url = st.text_input("URL:")

    if uploaded_file is not None:
        image_b = Image.open(uploaded_file).convert("RGB")
    elif image_url:
        try:
            response = requests.get(image_url)
            response.raise_for_status()
            image_b = Image.open(BytesIO(response.content)).convert("RGB")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ URL: {e}")
            image_b = None
    else:
        image_b = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if image_b is not None:
        st.image(image_b, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", width=500)
        st.subheader("–ù–∞–π–¥–µ–Ω–æ —Å–ø–∞—Å–µ–Ω–∏–µ")
        num_objects, mAP50, mAP50_95, plotted_image = calculate_image_metrics(
            image_b, model_b
        )
        st.write(f"–ö–æ–ª-–≤–æ –∫–æ—Ä–∞–±–ª–µ–π –¥–ª—è —ç–≤–∞–∫—É–∞—Ü–∏–∏ –æ—Ç —Å—Ç–∞–ª–∞–∫—Ç–∏—Ç–∞: {num_objects}")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å bounding boxes
        st.image(plotted_image, caption="Image with Bounding Boxes", width=500)


elif page == "ü¶≥ FACES":
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO12
    @st.cache_resource
    def load_model():
        model_path = "models/faces.pt"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(model_path):
            st.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
            st.stop()

        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model_f = YOLO("models/faces.pt")
        model_f.to(device)
        return model_f

    model_f = load_model()

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ results.csv
    @st.cache_data
    def load_results():
        results_path = "models/faces.csv"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(results_path):
            st.error(f"–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {results_path}")
            st.stop()

        results = pd.read_csv(results_path)
        return results

    results = load_results()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç—Ä–∏–∫
    def plot_metrics(results):
        fig, ax = plt.subplots(4, 1, figsize=(10, 20))

        # –ì—Ä–∞—Ñ–∏–∫ Loss
        ax[0].plot(
            results["epoch"],
            results["train/box_loss"],
            label="Train Box Loss",
            color="red",
        )
        ax[0].plot(
            results["epoch"],
            results["val/box_loss"],
            label="Validation Box Loss",
            color="orange",
        )
        ax[0].set_title("Box Loss over Epochs")
        ax[0].set_xlabel("Epoch")
        ax[0].set_ylabel("Loss")
        ax[0].legend()

        # –ì—Ä–∞—Ñ–∏–∫ Precision –∏ Recall
        ax[1].plot(
            results["epoch"],
            results["metrics/precision(B)"],
            label="Precision",
            color="blue",
        )
        ax[1].plot(
            results["epoch"],
            results["metrics/recall(B)"],
            label="Recall",
            color="green",
        )
        ax[1].set_title("Precision and Recall over Epochs")
        ax[1].set_xlabel("Epoch")
        ax[1].set_ylabel("Value")
        ax[1].legend()

        # –ì—Ä–∞—Ñ–∏–∫ mAP
        ax[2].plot(
            results["epoch"], results["metrics/mAP50(B)"], label="mAP50", color="purple"
        )
        ax[2].plot(
            results["epoch"],
            results["metrics/mAP50-95(B)"],
            label="mAP50-95",
            color="brown",
        )
        ax[2].set_title("mAP over Epochs")
        ax[2].set_xlabel("Epoch")
        ax[2].set_ylabel("mAP")
        ax[2].legend()

        # –ì—Ä–∞—Ñ–∏–∫ Learning Rates
        ax[3].plot(
            results["epoch"],
            results["lr/pg0"],
            label="Learning Rate (pg0)",
            color="teal",
        )
        ax[3].plot(
            results["epoch"],
            results["lr/pg1"],
            label="Learning Rate (pg1)",
            color="pink",
        )
        ax[3].plot(
            results["epoch"],
            results["lr/pg2"],
            label="Learning Rate (pg2)",
            color="gray",
        )
        ax[3].set_title("Learning Rates over Epochs")
        ax[3].set_xlabel("Epoch")
        ax[3].set_ylabel("Learning Rate")
        ax[3].legend()

        plt.tight_layout()
        mplcyberpunk.add_glow_effects(ax[0], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[1], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[2], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[3], gradient_fill=True)
        return fig

    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def calculate_image_metrics(image, model):
        with torch.no_grad():
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
            results = model_f(image)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º bounding boxes –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
            boxes = results[0].boxes
            num_objects = len(boxes)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º mAP50 –∏ mAP50-95 –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if hasattr(results[0], "mAP50"):
                mAP50 = results[0].mAP50  # mAP –¥–ª—è IoU –ø–æ—Ä–æ–≥–∞ 0.5
                mAP50_95 = results[0].mAP50_95  # mAP –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ IoU [0.5:0.95]
            else:
                mAP50, mAP50_95 = 0.0, 0.0

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ bounding boxes –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plotted_image = results[
                0
            ].plot()  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è bounding boxes

            return num_objects, mAP50, mAP50_95, plotted_image

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
    st.title("Metrics Dashboard")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    st.header("Training Metrics")
    fig = plot_metrics(results)
    st.pyplot(fig)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ URL
    st.header("–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"]
    )
    image_url = st.text_input("URL:")

    if uploaded_file is not None:
        image_f = Image.open(uploaded_file).convert("RGB")
    elif image_url:
        try:
            response = requests.get(image_url)
            response.raise_for_status()
            image_f = Image.open(BytesIO(response.content)).convert("RGB")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ URL: {e}")
            image_f = None
    else:
        image_f = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if image_f is not None:
        st.image(image_f, caption="–ü–æ–¥–æ–∑—Ä–µ–≤–∞–º—ã–π –ø–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏–π", width=500)
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞—Ä–∞–∂–µ–Ω–∏—è")
        num_objects, mAP50, mAP50_95, plotted_image = calculate_image_metrics(
            image_f, model_f
        )
        st.write(f"–ü–æ—Å—Ç—Ä–∞–¥–∞–≤—à–∏—Ö –æ—Ç —Å—Ç–∞–ª–∞–∫—Ç–∏—Ç–∞: {num_objects}")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å bounding boxes
        st.image(plotted_image, caption="Image with Bounding Boxes", width=500)

elif page == "üå≥ FOREST":
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO12
    @st.cache_resource
    def load_model():
        model_path = "models/forest.pt"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(model_path):
            st.error(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {model_path}")
            st.stop()

        device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        model_fo = YOLO("models/forest.pt")
        model_fo.to(device)
        return model_fo

    model_fo = load_model()

    # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ results.csv
    @st.cache_data
    def load_results():
        results_path = "models/forest.csv"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
        if not os.path.exists(results_path):
            st.error(f"–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: {results_path}")
            st.stop()

        results = pd.read_csv(results_path)
        return results

    results = load_results()

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ –º–µ—Ç—Ä–∏–∫
    def plot_metrics(results):
        fig, ax = plt.subplots(4, 1, figsize=(10, 20))

        # –ì—Ä–∞—Ñ–∏–∫ Loss
        ax[0].plot(
            results["epoch"],
            results["train/box_loss"],
            label="Train Box Loss",
            color="red",
        )
        ax[0].plot(
            results["epoch"],
            results["val/box_loss"],
            label="Validation Box Loss",
            color="orange",
        )
        ax[0].set_title("Box Loss over Epochs")
        ax[0].set_xlabel("Epoch")
        ax[0].set_ylabel("Loss")
        ax[0].legend()

        # –ì—Ä–∞—Ñ–∏–∫ Precision –∏ Recall
        ax[1].plot(
            results["epoch"],
            results["metrics/precision(B)"],
            label="Precision",
            color="blue",
        )
        ax[1].plot(
            results["epoch"],
            results["metrics/recall(B)"],
            label="Recall",
            color="green",
        )
        ax[1].set_title("Precision and Recall over Epochs")
        ax[1].set_xlabel("Epoch")
        ax[1].set_ylabel("Value")
        ax[1].legend()

        # –ì—Ä–∞—Ñ–∏–∫ mAP
        ax[2].plot(
            results["epoch"], results["metrics/mAP50(B)"], label="mAP50", color="purple"
        )
        ax[2].plot(
            results["epoch"],
            results["metrics/mAP50-95(B)"],
            label="mAP50-95",
            color="brown",
        )
        ax[2].set_title("mAP over Epochs")
        ax[2].set_xlabel("Epoch")
        ax[2].set_ylabel("mAP")
        ax[2].legend()

        # –ì—Ä–∞—Ñ–∏–∫ Learning Rates
        ax[3].plot(
            results["epoch"],
            results["lr/pg0"],
            label="Learning Rate (pg0)",
            color="teal",
        )
        ax[3].plot(
            results["epoch"],
            results["lr/pg1"],
            label="Learning Rate (pg1)",
            color="pink",
        )
        ax[3].plot(
            results["epoch"],
            results["lr/pg2"],
            label="Learning Rate (pg2)",
            color="gray",
        )
        ax[3].set_title("Learning Rates over Epochs")
        ax[3].set_xlabel("Epoch")
        ax[3].set_ylabel("Learning Rate")
        ax[3].legend()
        plt.tight_layout()
        mplcyberpunk.add_glow_effects(ax[0], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[1], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[2], gradient_fill=True)
        mplcyberpunk.add_glow_effects(ax[3], gradient_fill=True)
        return fig

    # –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    def calculate_image_metrics(image, model_fo):
        with torch.no_grad():
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞
            results = model_fo(image_fo)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º bounding boxes –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤
            boxes = results[0].boxes
            num_objects = len(boxes)

            # –ò–∑–≤–ª–µ–∫–∞–µ–º mAP50 –∏ mAP50-95 –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if hasattr(results[0], "mAP50"):
                mAP50 = results[0].mAP50  # mAP –¥–ª—è IoU –ø–æ—Ä–æ–≥–∞ 0.5
                mAP50_95 = results[0].mAP50_95  # mAP –¥–ª—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ IoU [0.5:0.95]
            else:
                mAP50, mAP50_95 = 0.0, 0.0

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ bounding boxes –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            plotted_image = results[
                0
            ].plot()  # –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è bounding boxes

            return num_objects, mAP50, mAP50_95, plotted_image

    # –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
    st.title("Metrics Dashboard")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    st.header("Training Metrics")
    fig = plot_metrics(results)
    st.pyplot(fig)
    mplcyberpunk.add_glow_effects()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–ª–∏ URL
    st.header("–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...", type=["jpg", "jpeg", "png"]
    )
    image_url = st.text_input("URL:")

    if uploaded_file is not None:
        image_fo = Image.open(uploaded_file).convert("RGB")
    elif image_url:
        try:
            response = requests.get(image_url)
            response.raise_for_status()
            image_fo = Image.open(BytesIO(response.content)).convert("RGB")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ URL: {e}")
            image_fo = None
    else:
        image_fo = None

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if image_fo is not None:
        st.image(image_fo, caption="–ü–æ–∏—Å–∫ –ª–æ–∫–∞—Ü–∏–∏ —Å–≤–µ–∂–µ–≥–æ –≤–æ–∑–¥—É—Ö–∞", width=500)
        st.subheader("–ó–æ–Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏—è")
        num_objects, mAP50, mAP50_95, plotted_image = calculate_image_metrics(
            image_fo, model_fo
        )
        st.write(f"–ö–æ–ª-–≤–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã—Ö –ª–æ–∫–∞—Ü–∏–π: {num_objects}")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å bounding boxes
        st.image(plotted_image, caption="Image with Bounding Boxes", width=500)
